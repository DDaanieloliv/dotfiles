-- return {
--
-- 	-- ###############################
-- 	-- ##                           ##
-- 	-- ## Plugin about Harpoon.     ##
-- 	-- ##                           ##
-- 	-- ###############################
--
-- 	{
-- 		"theprimeagen/harpoon",
-- 		branch = "harpoon2",
-- 		dependencies = { "nvim-lua/plenary.nvim" },
--
-- 		config = function()
-- 			local harpoon = require("harpoon")
--
-- 			harpoon.setup({
-- 				menu = {
-- 					width = 60,
-- 					height = 20,
-- 				},
-- 			})
--
-- 			-- função auxiliar para normalizar caminhos de arquivos
-- 			local function normalize_path(path)
-- 				return vim.fn.fnamemodify(path, ":p")
-- 			end
--
-- 			-- verifica se um arquivo está no harpoon
-- 			local function is_in_harpoon(bufname)
-- 				local normalized_current = normalize_path(bufname)
-- 				local list = harpoon:list()
--
-- 				if not list or not list.items then
-- 					return false
-- 				end
--
-- 				for _, item in ipairs(list.items) do
-- 					if item and item.value then
-- 						local normalized_item = normalize_path(item.value)
-- 						if normalized_item == normalized_current then
-- 							return true
-- 						end
-- 					end
-- 				end
-- 				return false
-- 			end
--
-- 			-- adiciona automaticamente buffers válidos ao harpoon.
-- 			vim.api.nvim_create_autocmd("bufenter", {
-- 				callback = function()
-- 					local bufname = vim.api.nvim_buf_get_name(0)
-- 					-- só adiciona se:
-- 					-- 1. for um arquivo real (não buffer especial)
-- 					-- 2. já não estiver no harpoon
-- 					-- 3. existir no sistema de arquivos
-- 					if
-- 							bufname ~= ""
-- 							and vim.bo.buftype == ""
-- 							and not is_in_harpoon(bufname)
-- 							and vim.fn.filereadable(bufname) == 1
-- 					then
-- 						harpoon:list():add()
-- 					end
-- 				end,
-- 			})
--
-- 			-- remove um arquivo do harpoon pelo seu caminho
-- 			local function remove_from_harpoon(bufname)
-- 				local normalized_target = normalize_path(bufname)
-- 				local list = harpoon:list()
--
-- 				if not list or not list.items then
-- 					return false
-- 				end
--
-- 				local found_index = nil
--
-- 				-- Primeiro encontra o índice exato do item a remover
-- 				for i, item in ipairs(list.items) do
-- 					if item and item.value then
-- 						if normalize_path(item.value) == normalized_target then
-- 							found_index = i
-- 							break
-- 						end
-- 					end
-- 				end
--
-- 				-- Se encontrou, remove apenas esse item específico
-- 				if found_index then
-- 					table.remove(list.items, found_index)
-- 					return true
-- 				end
--
-- 				return false
-- 			end
--
-- 			-- compacta a lista do harpoon removendo posições vazias
-- 			local function compact_harpoon_list()
-- 				local list = harpoon:list()
-- 				if not list or not list.items then
-- 					return
-- 				end
--
-- 				local new_items = {}
-- 				for _, item in ipairs(list.items) do
-- 					if item and item.value then
-- 						table.insert(new_items, item)
-- 					end
-- 				end
-- 				list.items = new_items
-- 			end
--
-- 			-- adiciona arquivo atual ao harpoon
-- 			-- adiciona arquivo atual ao harpoon (versão segura)
-- 			vim.keymap.set("n", "<leader>a", function()
-- 				local bufname = vim.api.nvim_buf_get_name(0)
--
-- 				-- Verifica se é um buffer válido para adicionar
-- 				if bufname == "" or vim.bo.buftype ~= "" then
-- 					vim.notify("Cannot add this buffer to Harpoon - not a file", vim.log.levels.WARN)
-- 					return
-- 				end
--
-- 				-- Verifica se já está no Harpoon
-- 				if is_in_harpoon(bufname) then
-- 					vim.notify("File already in Harpoon: " .. vim.fn.fnamemodify(bufname, ":t"), vim.log.levels.INFO)
-- 					return
-- 				end
--
-- 				-- Adiciona e notifica
-- 				harpoon:list():add()
-- 				local filename = vim.fn.fnamemodify(bufname, ":t") or "unknown file"
-- 				vim.notify("Added to Harpoon: " .. filename, vim.log.levels.INFO)
-- 			end, { desc = "adicionar arquivo ao harpoon" })
--
-- 			-- mostra menu do harpoon
-- 			vim.keymap.set("n", "<leader>m", function()
-- 				compact_harpoon_list()
-- 				harpoon.ui:toggle_quick_menu(harpoon:list())
-- 			end, { desc = "menu harpoon" })
--
-- 			-- remove arquivo atual do harpoon
-- 			vim.keymap.set("n", "<leader>d", function()
-- 				local current_file = vim.api.nvim_buf_get_name(0)
-- 				if current_file == "" or vim.bo.buftype ~= "" then
-- 					vim.notify("no valid file to remove", vim.log.levels.warn)
-- 					return
-- 				end
--
-- 				if remove_from_harpoon(current_file) then
-- 					vim.notify("removed from harpoon: " .. vim.fn.fnamemodify(current_file, ":t"), vim.log.levels.info)
-- 				else
-- 					vim.notify("file not in harpoon: " .. vim.fn.fnamemodify(current_file, ":t"), vim.log.levels.warn)
-- 				end
-- 			end, { desc = "remover arquivo atual do harpoon" })
--
-- 			-- Remove do Harpoon e deleta o buffer atual (versão corrigida)
-- 			vim.keymap.set("n", "<leader>q", function()
-- 				local bufname = vim.api.nvim_buf_get_name(0)
-- 				local bufnum = vim.fn.bufnr()
--
-- 				-- 1. Remove APENAS o arquivo atual do Harpoon
-- 				if remove_from_harpoon(bufname) then
-- 					vim.notify("Removed from Harpoon: " .. vim.fn.fnamemodify(bufname, ":t"), vim.log.levels.INFO)
-- 				end
--
-- 				-- 2. Verifica modificações não salvas
-- 				if vim.bo.modified then
-- 					local choice = vim.fn.confirm(
-- 						"Salvar alterações em " .. vim.fn.fnamemodify(bufname, ":t") .. "?",
-- 						"&Sim\n&Não\n&Cancelar",
-- 						1
-- 					)
-- 					if choice == 1 then -- Sim
-- 						vim.cmd("write")
-- 					elseif choice == 3 then -- Cancelar
-- 						return
-- 					end
-- 				end
--
-- 				-- 3. Fecha o buffer
-- 				local ok, err = pcall(vim.cmd, "silent! bd! " .. bufnum)
-- 				if not ok then
-- 					vim.notify("Erro ao fechar buffer: " .. tostring(err), vim.log.levels.ERROR)
-- 				else
-- 					vim.notify("Buffer deleted: " .. vim.fn.fnamemodify(bufname, ":~:."), vim.log.levels.INFO)
-- 				end
-- 			end, { desc = "Remover do Harpoon e deletar buffer atual" })
--
-- 			-- Deleta o último arquivo da lista do Harpoon
-- 			vim.keymap.set("n", "<leader>r", function()
-- 				local list = harpoon:list()
-- 				compact_harpoon_list() -- Garante que a lista está compactada
--
-- 				if not list.items or #list.items == 0 then
-- 					vim.notify("Harpoon list is empty!", vim.log.levels.WARN)
-- 					return
-- 				end
--
-- 				local last_item = list.items[#list.items]
-- 				local removed = remove_from_harpoon(last_item.value)
--
-- 				if removed then
-- 					vim.notify(
-- 						"Removed from Harpoon: " .. vim.fn.fnamemodify(last_item.value, ":t"),
-- 						vim.log.levels.INFO
-- 					)
-- 				else
-- 					vim.notify("Failed to remove: " .. vim.fn.fnamemodify(last_item.value, ":t"), vim.log.levels.ERROR)
-- 				end
-- 			end, { desc = "Remover último arquivo do Harpoon" })
--
-- 			-- Mapeamentos para acessar itens do Harpoon (Alt+1 a Alt+9)
-- 			for i = 1, 9 do
-- 				vim.keymap.set("n", "<A-" .. i .. ">", function()
-- 					compact_harpoon_list()
-- 					local list = harpoon:list()
--
-- 					if not list or not list.items or #list.items < i then
-- 						vim.notify("No file at position " .. i, vim.log.levels.WARN)
-- 						return
-- 					end
--
-- 					local item = list.items[i]
-- 					if not item or not item.value then
-- 						vim.notify("Invalid file at position " .. i, vim.log.levels.ERROR)
-- 						return
-- 					end
--
-- 					local current_file = vim.api.nvim_buf_get_name(0)
-- 					if normalize_path(current_file) == normalize_path(item.value) then
-- 						vim.notify("Already in: " .. vim.fn.fnamemodify(item.value, ":t"), vim.log.levels.INFO)
-- 						return
-- 					end
--
-- 					-- Tenta abrir o arquivo
-- 					local ok, err = pcall(vim.cmd, "edit " .. vim.fn.fnameescape(item.value))
-- 					if not ok then
-- 						vim.notify("Error opening file: " .. tostring(err), vim.log.levels.ERROR)
-- 					end
-- 				end, { desc = "Abrir item " .. i .. " do Harpoon" })
-- 			end
--
-- 			-- Autocomando para remover arquivos deletados do Harpoon
-- 			vim.api.nvim_create_autocmd("BufDelete", {
-- 				callback = function(args)
-- 					local bufname = vim.api.nvim_buf_get_name(args.buf)
-- 					if bufname ~= "" then
-- 						remove_from_harpoon(bufname)
-- 					end
-- 				end,
-- 			})
--
-- 			-- Desativa a adição automática de buffers ao Harpoon
-- 			-- (Remova o autocomando BufEnter que adiciona automaticamente)
-- 		end,
-- 	},
-- }
